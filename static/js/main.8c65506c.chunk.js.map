{"version":3,"sources":["model/index.js","actions/index.js","components/PostsType.js","components/Category.js","components/SearchBar.js","components/Post.js","components/PostList.js","components/App.js","reducers/index.js","index.js"],"names":["viewState","Object","freeze","NOTHING_TO_SHOW","LOADING","READY","categories","all","business","entertainment","health","science","sports","technology","getPosts","searchValue","isEveryThing","category","dispatch","a","setBlogViewState","fetch","method","mode","cache","credentials","request","json","response","status","articles","type","payload","state","PostsType","props","selectEveryThing","bind","selectTopHeadlines","event","this","postsType","setPostsType","className","onClick","Component","connect","Category","categoriesKeys","keys","map","setCategory","SearchBar","onInputChanged","onFormSubmitted","updateSearchValue","target","value","preventDefault","onSubmit","placeholder","onChange","id","Post","title","imageURL","src","alt","key","description","author","source","href","url","PostList","posts","post","urlToImage","name","App","combineReducers","action","postType","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c65506c.chunk.js","sourcesContent":["export const viewState = Object.freeze({\r\n    NOTHING_TO_SHOW: 0,\r\n    LOADING: 1,\r\n    READY: 2\r\n});\r\n\r\nexport const categories = Object.freeze({\r\n    all: 'all',\r\n    business: 'business',\r\n    entertainment: 'entertainment',\r\n    health: 'health',\r\n    science: 'science',\r\n    sports: 'sports',\r\n    technology: 'technology'\r\n});","import {categories, viewState} from \"../model\";\r\n\r\nexport const updateSearchValueActionType = 'UPDATE_SEARCH_VALUE';\r\nexport const getPostsActionType = 'GET_POSTS';\r\nexport const setBlogViewStateActionType = 'SET_BLOG_VIEW_STATE';\r\nexport const setPostsTypeActionType = 'SET_POSTS_TYPE';\r\nexport const setCategoryActionType = 'SET_CATEGORY';\r\n\r\nexport const updateSearchValue = searchValue => {\r\n    return {\r\n        type: updateSearchValueActionType,\r\n        payload: searchValue\r\n    };\r\n};\r\n\r\nexport const getPosts = (searchValue, isEveryThing = true, category = categories.all) => {\r\n    return async dispatch => {\r\n        dispatch(setBlogViewState(viewState.LOADING));\r\n        const request = await fetch(`http://newsapi.org/v2/${isEveryThing?'everything':'top-headlines'}?q=${searchValue}&sortBy=publishedAt&apiKey=5e03e5071d034d31bd436c12c8936b96&language=en${category!==categories.all && !isEveryThing?`&category=${category}`:''}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin'\r\n        });\r\n        const response = await request.json();\r\n        if (await response.status === 'ok') {\r\n            dispatch({\r\n                type: getPostsActionType,\r\n                payload: await response.articles\r\n            });\r\n            dispatch(setBlogViewState(viewState.READY));\r\n        } else {\r\n            dispatch(setBlogViewState(viewState.NOTHING_TO_SHOW));\r\n        }\r\n    };\r\n};\r\n\r\nexport const setBlogViewState = state => {\r\n    return {\r\n        type: setBlogViewStateActionType,\r\n        payload: state\r\n    };\r\n};\r\n\r\nexport const setPostsType = isEveryThing => {\r\n    return {\r\n        type: setPostsTypeActionType,\r\n        payload: isEveryThing\r\n    };\r\n};\r\n\r\nexport const setCategory = category => {\r\n    return {\r\n        type: setCategoryActionType,\r\n        payload: category\r\n    };\r\n};","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {setPostsType, getPosts} from \"../actions\";\r\nimport '../style/component/PostsType.css';\r\n\r\nclass PostsType extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectEveryThing = this.selectEveryThing.bind(this);\r\n        this.selectTopHeadlines = this.selectTopHeadlines.bind(this);\r\n    }\r\n\r\n    selectEveryThing(event) {\r\n        if (!this.props.postsType) {\r\n            this.props.setPostsType(true);\r\n            this.props.getPosts(this.props.searchValue, true, this.props.category);\r\n        }\r\n    }\r\n\r\n    selectTopHeadlines(event) {\r\n        if (this.props.postsType) {\r\n            this.props.setPostsType(false);\r\n            this.props.getPosts(this.props.searchValue, false, this.props.category);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"posts-type-container\">\r\n                <div className={`posts-type-type posts-type-type-${this.props.postsType?'selected':'not-selected'}`} onClick={this.selectEveryThing}>\r\n                    Every Thing\r\n                </div>\r\n                <div className={`posts-type-type posts-type-type-${!this.props.postsType?'selected':'not-selected'}`} onClick={this.selectTopHeadlines}>\r\n                    Top Headlines\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapToStateProps = state => {\r\n    return {\r\n        postsType: state.postsType,\r\n        searchValue: state.searchValue,\r\n        category: state.category\r\n    };\r\n};\r\n\r\nexport default connect(mapToStateProps, {setPostsType, getPosts})(PostsType);","import React, {Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {setCategory, getPosts} from \"../actions\";\r\nimport {categories} from \"../model\";\r\nimport '../style/component/Category.css';\r\n\r\nclass Category extends Component {\r\n    render() {\r\n        let categoriesKeys = Object.keys(categories);\r\n        return (\r\n            <div className=\"category-container\">\r\n                {\r\n                    categoriesKeys.map(category => {\r\n                        return (\r\n                            <div\r\n                                className={`category-category category-category-${category === this.props.category ? 'selected' : 'not-selected'}`}\r\n                                onClick={event => {\r\n                                    this.props.setCategory(category);\r\n                                    this.props.getPosts(this.props.searchValue, this.props.postsType, category)\r\n                                }}>\r\n                                {category}\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchValue: state.searchValue,\r\n        postsType: state.postsType,\r\n        category: state.category\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {setCategory, getPosts})(Category);","import React, {Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {updateSearchValue, getPosts} from \"../actions\";\r\nimport PostsType from \"./PostsType\";\r\nimport Category from \"./Category\";\r\nimport '../style/component/SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChanged = this.onInputChanged.bind(this);\r\n        this.onFormSubmitted = this.onFormSubmitted.bind(this);\r\n    }\r\n\r\n    onInputChanged(event) {\r\n        this.props.updateSearchValue(event.target.value);\r\n    }\r\n\r\n    async onFormSubmitted(event) {\r\n        event.preventDefault();\r\n        this.props.getPosts(this.props.searchValue, this.props.postsType, this.props.category);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar-container\">\r\n                <div className=\"search-bar-title\">Search In News</div>\r\n                <div className=\"search-bar-section\">\r\n                    <form onSubmit={this.onFormSubmitted}>\r\n                        <input type=\"text\"\r\n                               placeholder=\"search for news...\"\r\n                               value={this.props.searchValue}\r\n                               className=\"search-bar-search-input\"\r\n                               onChange={this.onInputChanged}/>\r\n                        <button type=\"submit\" className=\"search-bar-search-button\">\r\n                            <i className=\"search icon\" id=\"color-black\"/>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <PostsType/>\r\n                <Category/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchValue: state.searchValue,\r\n        postsType: state.postsType,\r\n        category: state.category\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {updateSearchValue, getPosts})(SearchBar);","import React, {Component} from 'react';\r\n\r\nimport '../style/component/Post.css';\r\n\r\nclass Post extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"post-container\">\r\n                <div className=\"post-title\">{this.props.title}</div>\r\n                {(() => {\r\n                    if (this.props.imageURL) {\r\n                        return<img src={this.props.imageURL} alt={this.props.title} className=\"post-image\" key={this.props.imageURL}/>;\r\n                    }\r\n                })()}\r\n                <div className=\"post-description\">{this.props.description}</div>\r\n                <br/>\r\n                <span className=\"post-author\">Author: {this.props.author}</span>\r\n                <br/>\r\n                <span className=\"post-source\">Source: {this.props.source}</span>\r\n                <br/>\r\n                <br/>\r\n                <a href={this.props.url}><button className=\"post-see-more-button\">see more <i className=\"caret square right icon\"></i></button></a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React, {Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport Post from \"./Post\";\r\nimport {viewState} from \"../model\";\r\nimport '../style/component/PostList.css';\r\n\r\nclass PostList extends Component {\r\n    render() {\r\n        if (this.props.viewState === viewState.READY) {\r\n            return this.props.posts.map(post => {\r\n                return <Post title={post.title} imageURL={post.urlToImage} description={post.description}\r\n                             url={post.url} author={post.author} source={post.source.name}/>\r\n            });\r\n        } else if (this.props.viewState === viewState.LOADING) {\r\n            return (\r\n                <div className=\"post-list-loader-container\">\r\n                    <div className=\"post-list-loader\"> </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"post-list-nothing-container\">\r\n                <i className=\"close icon large loading\"/>\r\n                <div className=\"post-list-nothing-container-text\">No News To Show</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        posts: state.posts,\r\n        viewState: state.viewState\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PostList);","import React, {Component} from 'react';\n\nimport SearchBar from \"./SearchBar\";\nimport PostList from \"./PostList\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div>\n                <SearchBar/>\n                <PostList/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import { combineReducers } from 'redux';\r\n\r\nimport {\r\n    updateSearchValueActionType, getPostsActionType,\r\n    setBlogViewStateActionType, setPostsTypeActionType,\r\n    setCategoryActionType\r\n} from '../actions';\r\n\r\nimport {categories} from \"../model\";\r\n\r\nconst searchValueReducer = (searchValue = '', action) => {\r\n    if (action.type === updateSearchValueActionType) {\r\n        return action.payload;\r\n    }\r\n    return searchValue;\r\n};\r\n\r\nconst postsReducer = (posts = null, action) => {\r\n    if (action.type === getPostsActionType) {\r\n        return action.payload;\r\n    }\r\n    return posts;\r\n};\r\n\r\n// eslint-disable-next-line no-use-before-define\r\nconst viewStateReducer = (viewState = 0, action) => {\r\n    if (action.type === setBlogViewStateActionType) {\r\n        return action.payload;\r\n    }\r\n    return viewState;\r\n};\r\n\r\nconst postsTypeReducer = (postType = true, action) => {\r\n    if (action.type === setPostsTypeActionType) {\r\n        return action.payload;\r\n    }\r\n    return postType;\r\n};\r\n\r\nconst categoryReducer = (category = categories.all, action) => {\r\n    if (action.type === setCategoryActionType) {\r\n        return action.payload;\r\n    }\r\n    return category;\r\n};\r\n\r\nexport default combineReducers({\r\n    searchValue: searchValueReducer,\r\n    posts: postsReducer,\r\n    viewState: viewStateReducer,\r\n    postsType: postsTypeReducer,\r\n    category: categoryReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render((\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ),\n    document.getElementById('root'));\n"],"sourceRoot":""}