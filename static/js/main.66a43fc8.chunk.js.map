{"version":3,"sources":["api/newsApi.js","components/SearchBar.js","actions/index.js","components/App.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","headers","apiKey","SearchBar","props","onInputChanged","bind","onFormSubmitted","event","this","updateSearchValue","target","value","preventDefault","newsApi","post","params","q","searchValue","sortBy","request","console","log","className","onSubmit","type","placeholder","onChange","id","Component","connect","state","payload","App","getPosts","combineReducers","action","posts","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"mTAIeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAHmB,wBAInBC,QAAS,CACLC,OAAQ,sCCAVC,G,kBACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAHR,E,4EAMJE,GACXC,KAAKL,MAAMM,kBAAkBF,EAAMG,OAAOC,S,+EAGxBJ,G,8EAClBA,EAAMK,iB,SACgBC,EAAQC,KAAK,cAAe,CAC9CC,OAAQ,CACJC,EAAGR,KAAKL,MAAMc,YACdC,OAAQ,e,OAHVC,E,OAMNC,QAAQC,IAAIF,GACRX,KAAKL,MAAMG,iBACXE,KAAKL,MAAMG,gBAAgBE,KAAKL,MAAMc,a,sIAK1C,OACI,yBAAKK,UAAU,wBACX,yBAAKA,UAAU,sBACX,0BAAMC,SAAUf,KAAKF,iBACjB,2BAAOkB,KAAK,OACLC,YAAY,qBACZd,MAAOH,KAAKL,MAAMc,YAClBK,UAAU,0BACVI,SAAUlB,KAAKJ,iBACtB,4BAAQoB,KAAK,SAASF,UAAU,4BAC5B,uBAAGA,UAAU,cAAcK,GAAG,wB,GApClCC,cAmDTC,eANS,SAAAC,GACpB,MAAO,CACHb,YAAaa,EAAMb,eAIa,CAACR,kBCpDR,SAAAQ,GAC7B,MAAO,CACHO,KANmC,sBAOnCO,QAASd,KDiDFY,CAA8C3B,GEtC9C8B,E,wLAbKf,GACZgB,I,+BAIA,OACI,6BACI,kBAAC,EAAD,CAAW3B,gBAAiBE,KAAKF,uB,GAT/BsB,aCaHM,cAAgB,CAC3BjB,YAfuB,WAA+B,IAA9BA,EAA6B,uDAAf,GAAIkB,EAAW,uCACrD,MFHuC,wBEGnCA,EAAOX,KACAW,EAAOJ,QAEXd,GAYPmB,MATiB,WAA2B,IAA1BA,EAAyB,uDAAjB,KAAMD,EAAW,uCAC3C,MFT8B,cES1BA,EAAOX,KACAW,EAAOJ,QAEXK,KCNLC,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAGJO,SAASC,eAAe,W","file":"static/js/main.66a43fc8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const baseURL = 'http://newsapi.org/v2';\r\n\r\nexport default axios.create({\r\n    baseURL: baseURL,\r\n    headers: {\r\n        apiKey: '5e03e5071d034d31bd436c12c8936b96'\r\n    }\r\n});","import React, {Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {updateSearchValue} from \"../actions\";\r\nimport '../style/Component/SearchBar.css';\r\nimport newsApi from \"../api/newsApi\";\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChanged = this.onInputChanged.bind(this);\r\n        this.onFormSubmitted = this.onFormSubmitted.bind(this);\r\n    }\r\n\r\n    onInputChanged(event) {\r\n        this.props.updateSearchValue(event.target.value);\r\n    }\r\n\r\n    async onFormSubmitted(event) {\r\n        event.preventDefault();\r\n        const request = await newsApi.post('/everything', {\r\n            params: {\r\n                q: this.props.searchValue,\r\n                sortBy: 'published'\r\n            }\r\n        });\r\n        console.log(request);\r\n        if (this.props.onFormSubmitted) {\r\n            this.props.onFormSubmitted(this.props.searchValue);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar-container\">\r\n                <div className=\"search-bar-section\">\r\n                    <form onSubmit={this.onFormSubmitted}>\r\n                        <input type=\"text\"\r\n                               placeholder=\"search for news...\"\r\n                               value={this.props.searchValue}\r\n                               className=\"search-bar-search-input\"\r\n                               onChange={this.onInputChanged}/>\r\n                        <button type=\"submit\" className=\"search-bar-search-button\">\r\n                            <i className=\"search icon\" id=\"color-black\"/>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchValue: state.searchValue\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {updateSearchValue})(SearchBar);","import newsApi from \"../api/newsApi\";\r\n\r\nexport const updateSearchValueActionType = 'UPDATE_SEARCH_VALUE';\r\nexport const getPostsActionType = 'GET_POSTS';\r\nexport const newsAPIKey = '5e03e5071d034d31bd436c12c8936b96';\r\n\r\nexport const updateSearchValue = searchValue => {\r\n    return {\r\n        type: updateSearchValueActionType,\r\n        payload: searchValue\r\n    };\r\n};\r\n\r\nexport const getPosts = searchValue => {\r\n    return async dispatch => {\r\n        const request = await newsApi.get('/everything', {\r\n            params: {\r\n                q: searchValue,\r\n                sortBy: 'published'\r\n            }\r\n        });\r\n        if (request.status === 200) {\r\n            dispatch({\r\n                type: getPostsActionType,\r\n                payload: request.articles\r\n            });\r\n        }\r\n    };\r\n};","import React, {Component} from 'react';\n\nimport SearchBar from \"./SearchBar\";\nimport {getPosts} from \"../actions\";\n\nclass App extends Component {\n\n    onFormSubmitted(searchValue) {\n        getPosts(searchValue);\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBar onFormSubmitted={this.onFormSubmitted}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import { combineReducers } from 'redux';\r\n\r\nimport { updateSearchValueActionType, getPostsActionType } from '../actions';\r\n\r\nconst searchValueReducer = (searchValue = '', action) => {\r\n    if (action.type === updateSearchValueActionType) {\r\n        return action.payload;\r\n    }\r\n    return searchValue;\r\n};\r\n\r\nconst postsReducer = (posts = null, action) => {\r\n    if (action.type === getPostsActionType) {\r\n        return action.payload;\r\n    }\r\n    return posts;\r\n}\r\n\r\nexport default combineReducers({\r\n    searchValue: searchValueReducer,\r\n    posts: postsReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render((\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ),\n    document.getElementById('root'));\n"],"sourceRoot":""}